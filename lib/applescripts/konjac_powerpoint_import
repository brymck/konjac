#!/usr/bin/osascript
global numbers_as_text
global line_feed
global vertical_tab
global carriage_return

-- parses the headers/separators inside the tags file
to parse_header(header, begin)
  set at_offset to begin
  
  repeat while character at_offset of header is in my numbers_as_text
    set at_offset to (at_offset + 1)
  end repeat
  
  return at_offset
end parse_header

to get_posix_path(mac_path)
  set result to POSIX path of mac_path
end get_posix_path

to import(filename)
  tell application "Microsoft PowerPoint"
    activate
    open filename
    set active_presentation to active presentation
    set ignored_content to {missing value, "", line_feed}
    
    -- set tags path to full path to active presentation with a .tags extension
    set presentation_path to (path of active_presentation) & ":" & ¬
      (name of active_presentation)
    set tags_path to presentation_path & ".diff"
    
    -- read in tags
    set tags_file to open for access file tags_path
    set tags to (read tags_file for (get eof tags_file) ¬
                   as «class utf8» using delimiter line_feed)
    set tag_index to 0
    set tag_length to length of tags
    close access tags_file

    set text_content to ""

    -- iterate through slides
    set slide_index to 0
    set prev_slide_index to 0
    set shape_index to 0
    set prev_shape_index to 0
    set is_new_tag to false

    repeat with current_line in tags
      if current_line starts with "@@ " then
        set comma_offset to my parse_header(current_line, 4)
        set slide_index to text 4 thru (comma_offset - 1) ¬
                                 of current_line as number
        set space_offset to my parse_header(current_line, comma_offset + 1)
        set shape_index to text (comma_offset + 1) thru (space_offset - 1) ¬
                                 of current_line as number
        set is_new_tag to true
      else if current_line starts with "+" then
        if slide_index is not 0 then
          set prev_slide_index to slide_index
          set prev_shape_index to shape_index

          -- handle blank lines with soft returns
          if length of current_line is less than 2
            set this_content to ""
          else
            set this_content to text 2 thru (length of current_line) ¬
                                  of current_line
          end if

          -- add to text content, joining with a soft return for multiple lines
          if text_content is "" then
            set text_content to this_content
          else
            set text_content to (text_content & carriage_return & this_content)
          end if
          set is_new_tag to false
        end if
      end if

      -- increment tag index
      set tag_index to tag_index + 1

      -- write if we've moved to a new tag or reached the end of the file
      if text_content is not "" and (tag_index is tag_length or is_new_tag)
        set content of text range of text frame of shape prev_shape_index ¬
              of slide prev_slide_index ¬
              of active presentation to text_content
        set text_content to ""
      end if
    end repeat
  end tell
end import

-- initialize global variables
to init_globals()
  set numbers_as_text to {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"}
  set line_feed to ASCII character 10
  set vertical_tab to ASCII character 11
  set carriage_return to ASCII character 13
end init_globals

-- main()
on run argv
  init_globals()
  import(item 1 of argv)
end run
